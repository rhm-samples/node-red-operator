---
- name: Get PVC
  k8s_info:
    kind: PersistentVolumeClaim
    name: "node-red-pvc"
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: nodered_pv

- name: Check PVC Exists
  set_fact:
    pvc_bound: "{{ nodered_pv | json_query('resources[].status.phase') }}"
    pvc_rwm: "{{ nodered_pv | json_query('resources[].spec.accessModes') }}"
- name: Debug
  debug:
    msg:
      - "PVC Query: '{{ nodered_pv }}'"
      - "PVC status: '{{ pvc_bound }}'"
      - "PVC Access Mode: '{{ pvc_rwm }}'"
- fail:
    msg: "Backup Request will be failed as PVC doesnt exist !"
  when: nodered_pv.resources | length == 0
- fail:
    msg: "Backup Request will be failed as PVC is not bound !"
  when: not "Bound" in nodered_pv.resources[0].status.phase
- fail:
    msg: "Backup Request will be failed as PVC is not of type READWRITEMANY!"
  when: not "ReadWriteMany" in nodered_pv.resources[0].spec.accessModes[0]

#- fail:
#    msg: "Backup Request will be failed as PVC requirement is not met!"
#  when: nodered_pv.resources[0].status.phase is defined and not "Bound" in nodered_pv.resources[0].status.phase and nodered_pv.resources[0].spec.accessModes is defined and not "ReadWriteMany" in nodered_pv.resources[0].spec.accessModes[0]

- name: set volume
  set_fact:
    volumeMounts:
      - mountPath: /data
        name: data
    volumeNames:
      - name: data
        persistentVolumeClaim:
          claimName:  node-red-pvc

- name: create ibm-s3-bucket-secrets
  include_tasks: s3-secrets.yaml

- block:
    - name: Node-Red On-Demand Backup
      vars:
        image:  "{{ lookup('env','RELATED_IMAGE_NODERED_BACKUP') }}"
      k8s:
        definition:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: 'node-red-backup1c-{{ ansible_operator_meta.name }}'
            namespace: '{{ ansible_operator_meta.namespace }}'
          spec:
            backoffLimit: 0
            restartPolicy: Never
            ttlSecondsAfterFinished: 300
            template:
              metadata:
                name: node-red-one-time-backup
              spec:
                serviceAccountName: node-red-operator
                securityContext:
                  fsGroup: 1000
                restartPolicy: Never
                containers:
                - name: node-red-one-time-backup
                  image: "{{ image }}"
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 1880
                  env:
                  # S3 Bucket Name
                  - name: BUCKET_NAME
                    valueFrom:
                      secretKeyRef:
                        name: ibm-s3-bucket-secrets-backup
                        key: BUCKET_NAME
                  # S3 IBM Storage End point link
                  - name: ENDPOINT
                    valueFrom:
                      secretKeyRef:
                        name: ibm-s3-bucket-secrets-backup
                        key: ENDPOINT
                  # API KEY
                  - name: API_KEY
                    valueFrom:
                      secretKeyRef:
                        name: ibm-s3-bucket-secrets-backup
                        key: API_KEY
                  # Token
                  - name: AUTH_ENDPOINT
                    valueFrom:
                      secretKeyRef:
                        name: ibm-s3-bucket-secrets-backup
                        key: AUTH_ENDPOINT
                  # Resource-Instance-Id
                  - name: RESOURCE_CRN
                    valueFrom:
                      secretKeyRef:
                        name: ibm-s3-bucket-secrets-backup
                        key: RESOURCE_CRN
                  # Namespace
                  - name: NAMESPACE
                    value: "{{ ansible_operator_meta.namespace }}"
                  volumeMounts: "{{ volumeMounts }}"
                  command:
                    - /bin/sh
                    - -c
                    - |
                      echo "Checking if Node-Red is running......."
                      
                      nc -z -v -w30 node-red-svc 1880
                      
                      response=$?
                      
                      if [ $response != "0" ]; then exit 1; fi
                      
                      mkdir -p /data/backups

                      export BACKUP_DIR_PATH="/data/backups/"

                      export BACKUP_FILE_NAME="node-red-"$NAMESPACE"-`date +"%d-%m-%Y-%H-%M"`.tar.gz"
                      
                      echo "Creating Backup File ....."
                      
                      tar -zcvf $BACKUP_DIR_PATH$BACKUP_FILE_NAME --exclude='./node_modules' --exclude='./node_modules/*' --exclude='./backups' --exclude='./backups/*' --exclude='./usr' --exclude='./usr/*' --exclude='./restore' --exclude='./restore-tar/*' -C /data/ .
                      
                      python3 /opt/scripts/backup-upload.py
                      
                      response=$?
                      
                      if [ $response == "0" ]; then  echo "Backup Complete."; else echo "Exiting Container because backup failed" && exit 1 ;  fi
                volumes: "{{ volumeNames }}"
  when: backup.schedule | default('', true) | trim == ''


- block:
    - name: Node-Red Scheduled Backup
      vars:
        image:  "{{ lookup('env','RELATED_IMAGE_NODERED_BACKUP') }}"
      k8s:
        definition:
          apiVersion: batch/v1beta1
          kind: CronJob
          metadata:
            name: 'nodered-backup-{{ ansible_operator_meta.name }}'
            namespace: '{{ ansible_operator_meta.namespace }}'
          spec:
            replias: 1
            successfulJobsHistoryLimit: 1
            failedJobsHistoryLimit: 1
            schedule: "{{ backup.schedule }}"
            jobTemplate:
              spec:
                #backoffLimit: 1
                template:
                  spec:
                    imagePullSecrets:
                    serviceAccountName: node-red-operator
                    restartPolicy: OnFailure
                    securityContext:
                      fsGroup: 1000
                    containers:
                    - name: node-red-backup
                      image: "{{ image }}"
                      imagePullPolicy: Always
                      ports:
                       - containerPort: 1880
                      env:
                      # S3 Bucket Name
                      - name: BUCKET_NAME
                        valueFrom:
                          secretKeyRef:
                            name: ibm-s3-bucket-secrets-backup
                            key: BUCKET_NAME
                      # S3 IBM Storage End point link
                      - name: ENDPOINT
                        valueFrom:
                          secretKeyRef:
                            name: ibm-s3-bucket-secrets-backup
                            key: ENDPOINT
                      # API KEY
                      - name: API_KEY
                        valueFrom:
                          secretKeyRef:
                            name: ibm-s3-bucket-secrets-backup
                            key: API_KEY
                      # Token
                      - name: AUTH_ENDPOINT
                        valueFrom:
                          secretKeyRef:
                            name: ibm-s3-bucket-secrets-backup
                            key: AUTH_ENDPOINT
                      # Resource-Instance-Id
                      - name: RESOURCE_CRN
                        valueFrom:
                          secretKeyRef:
                            name: ibm-s3-bucket-secrets-backup
                            key: RESOURCE_CRN
                      # Namespace
                      - name: NAMESPACE
                        value: "{{ ansible_operator_meta.namespace }}"
                      volumeMounts: "{{ volumeMounts }}"
                      command:
                        - /bin/sh
                        - -c
                        - |
                          echo "Checking if Node-Red is running......."
                          
                          nc -z -v -w30 node-red-svc 1880
                          
                          response=$? && echo $response
                          
                          if [ $response != "0" ]; then exit 1; fi
                          
                          mkdir -p /data/backups

                          export BACKUP_DIR_PATH="/data/backups/"

                          export BACKUP_FILE_NAME="node-red-"$NAMESPACE"-`date +"%d-%m-%Y-%H-%M"`.tar.gz"
                          
                          tar -zcvf $BACKUP_DIR_PATH$BACKUP_FILE_NAME --exclude='./node_modules' --exclude='./node_modules/*' --exclude='./backups' --exclude='./backups/*' --exclude='./usr' --exclude='./usr/*' --exclude='./restore' --exclude='./restore-tar/*' -C /data/ .
                          response=$? # && echo $response

                          if [ $response != "0" ]; then  echo "Exiting Container because backup failed" && exit 1 ;  fi
                          
                          python3 /opt/scripts/backup-upload.py
                          
                          response=$? # && echo $response
                          
                          if [ $response == "0" ]; then  echo "Backup Complete."; else echo "Exiting Container because backup failed" && exit 1 ;  fi
                          
                    volumes: "{{ volumeNames }}"
  when: backup.schedule | default('', true) | trim != ''
